#!/usr/bin/env python3
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, Gio

class BreadRecipeApp(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title="Bread Recipe")
        self.set_default_size(300, 200)

        # Create a vertical box container
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        self.add(vbox)

        # Total Weight Entry
        weight_label = Gtk.Label(label="Total Weight (in grams):")
        vbox.pack_start(weight_label, False, False, 0)

        self.weight_entry = Gtk.Entry()
        vbox.pack_start(self.weight_entry, False, False, 0)

        # Flour Blend Entries
        self.flour_entries = []
        self.flour_labels = []
        self.flour_percentages = []

        for flour in ["AP Flour", "Whole Wheat Flour", "Spelt Flour"]:
            label = Gtk.Label(label=f"{flour} Percentage:")
            entry = Gtk.Entry()
            vbox.pack_start(label, False, False, 0)
            vbox.pack_start(entry, False, False, 0)
            self.flour_entries.append(entry)
            self.flour_labels.append(label)

        # Water Entry
        water_label = Gtk.Label(label="Water Percentage:")
        self.water_entry = Gtk.Entry()
        vbox.pack_start(water_label, False, False, 0)
        vbox.pack_start(self.water_entry, False, False, 0)

        # Levain Entry
        levain_label = Gtk.Label(label="Levain Percentage:")
        self.levain_entry = Gtk.Entry()
        vbox.pack_start(levain_label, False, False, 0)
        vbox.pack_start(self.levain_entry, False, False, 0)

        # Salt Entry
        salt_label = Gtk.Label(label="Salt Percentage:")
        self.salt_entry = Gtk.Entry()
        vbox.pack_start(salt_label, False, False, 0)
        vbox.pack_start(self.salt_entry, False, False, 0)

        # Save Button
        save_button = Gtk.Button(label="Save Recipe")
        save_button.connect("clicked", self.on_save_clicked)
        vbox.pack_start(save_button, False, False, 0)

        # Load Button
        load_button = Gtk.Button(label="Load Recipe")
        load_button.connect("clicked", self.on_load_clicked)
        vbox.pack_start(load_button, False, False, 0)

        # Calculate Button
        calculate_button = Gtk.Button(label="Calculate")
        calculate_button.connect("clicked", self.on_calculate_clicked)
        vbox.pack_start(calculate_button, False, False, 0)

        # Result Label
        self.result_label = Gtk.Label()
        vbox.pack_start(self.result_label, True, True, 0)

    def on_save_clicked(self, button):
        dialog = Gtk.FileChooserDialog(
            title="Save Recipe",
            parent=self,
            action=Gtk.FileChooserAction.SAVE,
            buttons=(
                Gtk.STOCK_CANCEL,
                Gtk.ResponseType.CANCEL,
                Gtk.STOCK_SAVE,
                Gtk.ResponseType.OK,
            ),
        )
        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            filepath = dialog.get_filename()
            data = self.get_recipe_data()
            self.save_recipe(filepath, data)
            self.result_label.set_text(f"Recipe saved to {filepath}")
        dialog.destroy()

    def on_load_clicked(self, button):
        dialog = Gtk.FileChooserDialog(
            title="Load Recipe",
            parent=self,
            action=Gtk.FileChooserAction.OPEN,
            buttons=(
                Gtk.STOCK_CANCEL,
                Gtk.ResponseType.CANCEL,
                Gtk.STOCK_OPEN,
                Gtk.ResponseType.OK,
            ),
        )
        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            filepath = dialog.get_filename()
            data = self.load_recipe(filepath)
            self.set_recipe_data(data)
            self.result_label.set_text(f"Recipe loaded from {filepath}")
        dialog.destroy()

    def on_calculate_clicked(self, button):
        total_weight = float(self.weight_entry.get_text())

        # Get the flour blend percentages
        flour_percentages = [float(entry.get_text()) for entry in self.flour_entries]
        flour_sum = sum(flour_percentages)

        if abs(flour_sum - 100) > 1e-6:
            self.result_label.set_text("Error: The sum of flour percentages must be equal to 100.")
            return

        # Calculate the ingredient measurements
        flour_weights = [percentage / 100 * total_weight for percentage in flour_percentages]
        water_weight = float(self.water_entry.get_text()) / 100 * total_weight
        levain_weight = float(self.levain_entry.get_text()) / 100 * total_weight
        salt_weight = float(self.salt_entry.get_text()) / 100 * total_weight

        # Adjust ingredient weights if the total sum exceeds the desired dough weight
        total_ingredient_weight = sum(flour_weights) + water_weight + levain_weight + salt_weight
        if total_ingredient_weight > total_weight:
            ratio = total_weight / total_ingredient_weight
            flour_weights = [weight * ratio for weight in flour_weights]
            water_weight *= ratio
            levain_weight *= ratio
            salt_weight *= ratio

        # Display the result
        result = f"Ingredient measurements in grams:\n"
        for i, flour in enumerate(["AP Flour", "Whole Wheat Flour", "Spelt Flour"]):
            result += f"{flour}: {flour_weights[i]:.2f} g\n"
        result += f"Water: {water_weight:.2f} g\n"
        result += f"Levain: {levain_weight:.2f} g\n"
        result += f"Salt: {salt_weight:.2f} g"
        self.result_label.set_text(result)

    @staticmethod
    def save_recipe(filepath, data):
        with open(filepath, "w") as f:
            for key, value in data.items():
                f.write(f"{key}:{value}\n")

    @staticmethod
    def load_recipe(filepath):
        data = {}
        with open(filepath, "r") as f:
            for line in f:
                key, value = line.strip().split(":")
                data[key] = value
        return data

    def get_recipe_data(self):
        data = {
            "Total Weight": self.weight_entry.get_text(),
            "Water Percentage": self.water_entry.get_text(),
            "Levain Percentage": self.levain_entry.get_text(),
            "Salt Percentage": self.salt_entry.get_text(),
        }
        for i, label in enumerate(self.flour_labels):
            flour_name = label.get_text().split(" ")[0]
            flour_percentage = self.flour_entries[i].get_text()
            data[f"{flour_name} Percentage"] = flour_percentage
        return data

    def set_recipe_data(self, data):
        self.weight_entry.set_text(data["Total Weight"])
        self.water_entry.set_text(data["Water Percentage"])
        self.levain_entry.set_text(data["Levain Percentage"])
        self.salt_entry.set_text(data["Salt Percentage"])
        for i, label in enumerate(self.flour_labels):
            flour_name = label.get_text().split(" ")[0]
            self.flour_entries[i].set_text(data[f"{flour_name} Percentage"])

win = BreadRecipeApp()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()

